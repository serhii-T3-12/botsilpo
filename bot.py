import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

TOKEN = "7861897815:AAFByfkNqSIWIauet7k0lyS80SgiuqWPDhw"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –†–µ–∂–∏–º–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É
user_searching = {}
user_adding = {}

# –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤ (–ù–∞–∑–≤–∞ -> –ê—Ä—Ç–∏–∫—É–ª)
product_database = {
    "–∞–π–∑–±–µ—Ä–≥": "540258",
    "–º–æ–ª–æ–∫–æ": "M67890",
    "—Ö–ª—ñ–±": "H54321",
    "—è–±–ª—É–∫–æ": "Y98765",
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message(Command("list"))
async def list_command(message: Message):
    commands = (
        "/start - –ü–æ—á–∞—Ç–∏\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏\n"
        "/search - –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é\n"
        "/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä"
    )
    await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n{commands}")

# –ö–æ–º–∞–Ω–¥–∞ /search
@dp.message(Command("search"))
async def search_command(message: Message):
    user_searching[message.from_user.id] = True
    await message.answer("üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É:")

# –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message(Command("add"))
async def add_command(message: Message):
    user_adding[message.from_user.id] = True
    await message.answer("‚ûï –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É —Ç–∞ –∞—Ä—Ç–∏–∫—É–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ω–∞–∑–≤–∞ - –∞—Ä—Ç–∏–∫—É–ª")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_text(message: Message):
    user_id = message.from_user.id
    text = message.text.lower()

    # –û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—É
    if user_searching.get(user_id):
        if text in product_database:
            response = f"‚úÖ –¢–æ–≤–∞—Ä –∑–Ω–∞–π–¥–µ–Ω–æ: <b>{text.capitalize()}</b>\nüÜî –ê—Ä—Ç–∏–∫—É–ª: <code>{product_database[text]}</code>"
        else:
            response = "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        await message.answer(response)
        user_searching[user_id] = False  # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É

    # –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    elif user_adding.get(user_id):
        try:
            name, article = map(str.strip, text.split("-", 1))
            if name in product_database:
                response = "‚ö†Ô∏è –¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ —î –≤ –±–∞–∑—ñ!"
            else:
                product_database[name] = article
                response = f"‚úÖ –¢–æ–≤–∞—Ä <b>{name.capitalize()}</b> –¥–æ–¥–∞–Ω–æ!\nüÜî –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>"
        except ValueError:
            response = "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: <code>–Ω–∞–∑–≤–∞ - –∞—Ä—Ç–∏–∫—É–ª</code>"
        await message.answer(response)
        user_adding[user_id] = False  # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è

async def main():
    logging.basicConfig(level=logging.INFO)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


