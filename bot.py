import sqlite3
import logging
import os
import csv
import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
import asyncio
import aiosqlite


# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
TOKEN = "7861897815:AAFByfkNqSIWIauet7k0lyS80SgiuqWPDhw"
ADMIN_ID = 1299582357  # –¢–≤—ñ–π Telegram ID
AUTHORIZED_USERS = {ADMIN_ID}  # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode="HTML")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()  # –¢–æ–∫–µ–Ω —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω


# üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üîπ –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_PATH = "products.db"

# üîπ –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
async def execute_query(query, params=(), fetchone=False, fetchall=False):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(query, params)
        result = None

        if fetchone:
            result = await cursor.fetchone()
        elif fetchall:
            result = await cursor.fetchall()

        await db.commit()
        await cursor.close()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
        return result


# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
async def init_db():
    await execute_query("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            article TEXT NOT NULL,
            category TEXT NOT NULL DEFAULT '–ó–∞–≥–∞–ª—å–Ω–∞'
        )
    """)

# üîπ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# üîπ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS

# üîπ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def notify_admin(action, product_name, article, category=""):
    message = f"üîî <b>{action}</b>\nüìå –ù–∞–∑–≤–∞: {hbold(product_name)}\nüÜî –ê—Ä—Ç–∏–∫—É–ª: {hbold(article)}"
    if category:
        message += f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {hbold(category)}"
    await bot.send_message(ADMIN_ID, message)


# üìå /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –û—Å—å –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/search - –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É\n"
                         "/search_article - –ü–æ—à—É–∫ –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º\n"
                         "/count - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤\n"
                         "\nüîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
                         "/add, /list, /delete, /edit, /categories\n"
                         "/export, /import, /export_category, /clear_all\n"
                         "\n/login <–ø–∞—Ä–æ–ª—å> ‚Äì –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è\n/logout ‚Äì –≤–∏–π—Ç–∏")

# üìå /login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
@dp.message(Command("login"))
async def login_command(message: Message):
    try:
        password = message.text.split(" ", 1)[1].strip()
        if password == "01032025":
            AUTHORIZED_USERS.add(message.from_user.id)
            await message.answer(
                "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode="HTML")
    except IndexError:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/login –ø–∞—Ä–æ–ª—å</code>", parse_mode="HTML")


# üìå /count
@dp.message(Command("count"))
async def count_products(message: Message):
    result = await execute_query("SELECT COUNT(*) FROM products", fetchone=True)
    count = result[0] if result else 0
    await message.answer(f"üì¶ –£ –±–∞–∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä—ñ–≤.")


# üìå /search_article
@dp.message(Command("search_article"))
async def search_article(message: Message):
    try:
        article = message.text.split(" ", 1)[1].strip()
        result = await execute_query("SELECT name, category FROM products WHERE article = ?", (article,), fetchone=True)
        if result:
            name, category = result
            await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ:\n‚úÖ {hbold(name)} (üìÇ {hbold(category)})")
        else:
            await message.answer(f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª '{article}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except IndexError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /search_article <–∞—Ä—Ç–∏–∫—É–ª>")

# üìå /export_category
@dp.message(Command("export_category"))
async def export_category(message: Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤!")
        return

    try:
        category = message.text.split(" ", 1)[1].strip()
        file_path = f"{category}_products.csv"

        products = await execute_query(
            "SELECT name, article FROM products WHERE category = ?", (category,), fetchall=True
        )

        if not products:
            await message.answer(f"‚ö†Ô∏è –£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î.")
            return

        with open(file_path, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["–ù–∞–∑–≤–∞", "–ê—Ä—Ç–∏–∫—É–ª"])
            writer.writerows(products)

        await message.answer_document(types.FSInputFile(file_path), caption=f"üìÇ –¢–æ–≤–∞—Ä–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'")

    except IndexError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /export_category <–∫–∞—Ç–µ–≥–æ—Ä—ñ—è>")



# üìå /export (–µ–∫—Å–ø–æ—Ä—Ç —É CSV) - –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
@dp.message(Command("export"))
async def export_products(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    file_path = "products.csv"

    products = await execute_query(
        "SELECT name, article, category FROM products", fetchall=True
    )

    if not products:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    with open(file_path, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["–ù–∞–∑–≤–∞", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"])
        writer.writerows(products)

    await message.answer_document(types.FSInputFile(file_path), caption="üìÇ –í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤")




# üìå /import (—ñ–º–ø–æ—Ä—Ç —ñ–∑ CSV) - –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
@dp.message(Command("import"))
async def import_products(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    if not os.path.exists("products.csv"):
        await message.answer("‚ö†Ô∏è –§–∞–π–ª products.csv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    with open("products.csv", mode="r", encoding="utf-8") as file:
        reader = csv.reader(file)
        next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        added = 0

        for row in reader:
            try:
                name, article, category = row

                await execute_query(
                    "INSERT INTO products (name, article, category) VALUES (?, ?, ?)",
                    (name.strip(), article.strip(), category.strip()),
                    fetchone=False,
                    fetchall=False
                )

                added += 1
            except sqlite3.IntegrityError:
                pass

    await message.answer(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {added} —Ç–æ–≤–∞—Ä—ñ–≤")


# üìå /add
@dp.message(Command("add"))
async def add_product(message: Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤!")
        return

    try:
        text = message.text.split(" ", 1)[1].strip()
        products = [p.strip() for p in text.split("\n")]  # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–æ —Ä—è–¥–∫–∞—Ö

        added_count = 0
        existing_count = 0
        errors = []

        for product in products:
            try:
                name, article, category = map(str.strip, product.split(" - "))

                if not name or not article.isdigit():  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∞—Ä—Ç–∏–∫—É–ª - —á–∏—Å–ª–æ
                    errors.append(product)
                    continue

                existing_product = await execute_query(
                    "SELECT id FROM products WHERE name = ? OR article = ?",
                    (name, article), fetchone=True
                )

                if existing_product:
                    existing_count += 1
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä, —è–∫—â–æ –≤—ñ–Ω —É–∂–µ —î

                await execute_query(
                    "INSERT INTO products (name, article, category) VALUES (?, ?, ?)",
                    (name, article, category)
                )
                added_count += 1

            except ValueError:
                errors.append(product)
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–º–∏–ª–∫–æ–≤–∏–π –∑–∞–ø–∏—Å

        result_msg = f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: {added_count} —Ç–æ–≤–∞—Ä(—ñ–≤).\n"
        if existing_count:
            result_msg += f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ —î –≤ –±–∞–∑—ñ): {existing_count} —Ç–æ–≤–∞—Ä(—ñ–≤).\n"
        if errors:
            result_msg += f"‚ùå –ü–æ–º–∏–ª–∫–∏ —É –∑–∞–ø–∏—Å–∞—Ö: {', '.join(errors)}."

        await message.answer(result_msg)

    except IndexError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞ - –ê—Ä—Ç–∏–∫—É–ª - –ö–∞—Ç–µ–≥–æ—Ä—ñ—è\n"
                             "–©–æ–± –¥–æ–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞.")


class ClearAllState(StatesGroup):
    waiting_for_password = State()
    waiting_for_confirmation = State()

CLEAR_ALL_PASSWORD = "05012025"

@dp.message(Command("clear_all"))
async def clear_all_products(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤!")
        return

    await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
    await state.set_state(ClearAllState.waiting_for_password)

@dp.message(ClearAllState.waiting_for_password)
async def confirm_password(msg: Message, state: FSMContext):
    if msg.text == CLEAR_ALL_PASSWORD:
        await msg.answer("üî¥ –í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ '–¢–ê–ö' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ '–ù–Ü' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        await state.set_state(ClearAllState.waiting_for_confirmation)
    else:
        await msg.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
        await state.clear()

@dp.message(ClearAllState.waiting_for_confirmation)
async def final_confirmation(msg: Message, state: FSMContext):
    if msg.text.strip().lower() == "—Ç–∞–∫":
        await execute_query("DELETE FROM products")
        await execute_query("VACUUM")  # –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        await msg.answer("üóë –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ, –±–∞–∑–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞!")
    else:
        await msg.answer("‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    
    await state.clear()

# üìå /search
@dp.message(Command("search"))
async def search_product(message: Message):
    try:
        query = message.text.split(" ", 1)[1].strip()

        results = await execute_query(
            "SELECT name, article, category FROM products WHERE name LIKE ? OR article LIKE ?",
            ('%' + query + '%', '%' + query + '%'), fetchall=True
        )

        if not results:
            await message.answer(f"‚ö†Ô∏è '{query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        response = "üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ:</b>\n"
        for name, article, category in results:
            response += f"‚úÖ {hbold(name)} (üÜî {hbold(article)}, üìÇ {hbold(category)})\n"

        await message.answer(response)

    except IndexError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ –∞—Ä—Ç–∏–∫—É–ª: /search <–∑–∞–ø–∏—Ç>")


# üìå /categories
@dp.message(Command("categories"))
async def list_categories(message: Message):
    categories = await execute_query("SELECT DISTINCT category FROM products", fetchall=True)

    if not categories:
        await message.answer("üì≠ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ!")
        return

    response = "üìÇ <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:</b>\n" + "\n".join(f"‚úÖ {hbold(cat[0])}" for cat in categories)
    await message.answer(response)


# üìå /delete (–æ–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)
@dp.message(Command("delete"))
async def delete_product(message: Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤!")
        return

    try:
        name = message.text.split(" ", 1)[1].strip()
        result = await execute_query("SELECT id FROM products WHERE name = ?", (name,), fetchone=True)
        
        if not result:
            await message.answer(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{hbold(name)}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        await execute_query("DELETE FROM products WHERE name = ?", (name,))
        await execute_query("VACUUM")  # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        await message.answer(f"üóë –¢–æ–≤–∞—Ä '{hbold(name)}' –≤–∏–¥–∞–ª–µ–Ω–æ, –±–∞–∑–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞!")
    
    except IndexError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /delete –ù–∞–∑–≤–∞")


# –ö–æ–º–∞–Ω–¥–∞ /edit - —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@dp.message(Command("edit"))
async def edit_product(message: Message):
    try:
        text = message.text.split(" ", 1)[1].strip()
        name, new_article, new_category = text.split(" - ")

        existing = await execute_query("SELECT * FROM products WHERE name = ?", (name,), fetchone=True)
        if not existing:
            await message.answer(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        await execute_query(
            "UPDATE products SET article = ?, category = ? WHERE name = ?",
            (new_article.strip(), new_category.strip(), name.strip())
        )

        await message.answer(
            f"‚úèÔ∏è –¢–æ–≤–∞—Ä '{hbold(name)}' –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–ù–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª: üÜî {hbold(new_article.strip())}\n"
            f"–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: üìÇ {hbold(new_category.strip())}"
        )
    
    except ValueError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /edit –ù–∞–∑–≤–∞ - –ù–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª - –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")


async def send_daily_report():
    try:
        result = await execute_query("SELECT COUNT(*) FROM products", fetchone=True)
        count = result[0] if result else 0
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_message = f"üìä <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç</b>\nüïí –ß–∞—Å: {now}\nüì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {count}"
        
        await bot.send_message(ADMIN_ID, report_message)
        logging.info("‚úÖ –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")


async def schedule_daily_report():
    while True:
        try:
            now = datetime.datetime.now()
            target_time = now.replace(hour=23, minute=0, second=0, microsecond=0)

            if now > target_time:
                target_time += datetime.timedelta(days=1)

            wait_time = (target_time - now).total_seconds()
            logging.info(f"üìÖ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–≤—ñ—Ç –±—É–¥–µ —á–µ—Ä–µ–∑ {wait_time / 3600:.2f} –≥–æ–¥–∏–Ω.")

            await asyncio.sleep(wait_time)
            await send_daily_report()

        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —â–æ–¥–µ–Ω–Ω–æ–º—É –∑–≤—ñ—Ç—ñ: {e}")
            await asyncio.sleep(60)  # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —á–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º



# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await init_db()
    products = await execute_query("SELECT COUNT(*) FROM products", fetchone=True)
    print(f"üì¶ –¢–æ–≤–∞—Ä—ñ–≤ —É –±–∞–∑—ñ: {products[0] if products else 0}")
    asyncio.create_task(schedule_daily_report())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())  # –ö–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

