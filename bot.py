import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold

TOKEN = "7861897815:AAFByfkNqSIWIauet7k0lyS80SgiuqWPDhw"

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("products.db")
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
cursor.execute("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    article TEXT
)
""")
conn.commit()


# üìå –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏! üõí\n\n"
                         "–ö–æ–º–∞–Ω–¥–∏:\n"
                         "/list - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏\n"
                         "/search <–Ω–∞–∑–≤–∞> - –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É\n"
                         "/add <–Ω–∞–∑–≤–∞> - <–∞—Ä—Ç–∏–∫—É–ª> - –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")


# üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
@dp.message(Command("add"))
async def add_product(message: Message):
    try:
        text = message.text.split(" ", 1)[1]  # –ë–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
        name, article = text.split(" - ")  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞–∑–≤—É —ñ –∞—Ä—Ç–∏–∫—É–ª

        cursor.execute("INSERT INTO products (name, article) VALUES (?, ?)", (name.strip(), article.strip()))
        conn.commit()

        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä {hbold(name.strip())} –¥–æ–¥–∞–Ω–æ!\nüÜî –ê—Ä—Ç–∏–∫—É–ª: {hbold(article.strip())}")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏: /add –ù–∞–∑–≤–∞ - –ê—Ä—Ç–∏–∫—É–ª")
    except sqlite3.IntegrityError:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–∏–π —Ç–æ–≤–∞—Ä –≤–∂–µ —ñ—Å–Ω—É—î!")


# üìå –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É –∑–∞ –Ω–∞–∑–≤–æ—é
@dp.message(Command("search"))
async def search_product(message: Message):
    try:
        query = message.text.split(" ", 1)[1].strip()
        cursor.execute("SELECT name, article FROM products WHERE name LIKE ?", (f"%{query}%",))
        result = cursor.fetchall()

        if result:
            response = "üîé –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
            for name, article in result:
                response += f"‚úÖ {hbold(name)}\nüÜî –ê—Ä—Ç–∏–∫—É–ª: {hbold(article)}\n\n"
            await message.answer(response)
        else:
            await message.answer("‚ö†Ô∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except IndexError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏: /search –ù–∞–∑–≤–∞")


# üìå –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤
@dp.message(Command("list"))
async def list_products(message: Message):
    cursor.execute("SELECT name, article FROM products")
    products = cursor.fetchall()

    if products:
        response = "üìú –£—Å—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
        for name, article in products:
            response += f"‚úÖ {hbold(name)}\nüÜî –ê—Ä—Ç–∏–∫—É–ª: {hbold(article)}\n\n"
        await message.answer(response)
    else:
        await message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î!")


# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

