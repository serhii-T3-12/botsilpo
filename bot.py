import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
TOKEN = "7861897815:AAFByfkNqSIWIauet7k0lyS80SgiuqWPDhw"
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
conn = sqlite3.connect("products.db")
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
cursor.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        article TEXT NOT NULL
    )
""")
conn.commit()


# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –û—Å—å –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/add - –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n"
                         "/list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤\n"
                         "/search - –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É\n"
                         "/delete - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n"
                         "/edit - –ó–º—ñ–Ω–∏—Ç–∏ —Ç–æ–≤–∞—Ä")


# üìå –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message(Command("add"))
async def add_product(message: Message):
    try:
        text = message.text.split(" ", 1)[1]
        items = text.split(",")

        added = []
        errors = []

        for item in items:
            try:
                name, article = item.strip().split(" - ")
                cursor.execute("INSERT INTO products (name, article) VALUES (?, ?)", (name.strip(), article.strip()))
                added.append(f"‚úÖ {hbold(name.strip())} (üÜî {hbold(article.strip())})")
            except sqlite3.IntegrityError:
                errors.append(f"‚ö†Ô∏è {hbold(name.strip())} –≤–∂–µ —î")
            except ValueError:
                errors.append(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: {hbold(item.strip())}")

        conn.commit()

        response = "\n".join(added) if added else "‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ–¥–∞–Ω–æ."
        if errors:
            response += "\n\n‚ùå –ü–æ–º–∏–ª–∫–∏:\n" + "\n".join(errors)

        await message.answer(response)

    except IndexError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞ - –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∑–≤–∞2 - –ê—Ä—Ç–∏–∫—É–ª2")


# üìå –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message(Command("list"))
async def list_products(message: Message):
    cursor.execute("SELECT name, article FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    response = "üìú <b>–¢–æ–≤–∞—Ä–∏:</b>\n"
    for name, article in products:
        response += f"üîπ {hbold(name)} (üÜî {hbold(article)})\n"

    await message.answer(response)


# üìå –ö–æ–º–∞–Ω–¥–∞ /search
@dp.message(Command("search"))
async def search_product(message: Message):
    try:
        query = message.text.split(" ", 1)[1].strip()
        cursor.execute("SELECT name, article FROM products WHERE name LIKE ?", ('%' + query + '%',))
        results = cursor.fetchall()

        if not results:
            await message.answer(f"‚ö†Ô∏è '{query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        response = "üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ:</b>\n"
        for name, article in results:
            response += f"‚úÖ {hbold(name)} (üÜî {hbold(article)})\n"

        await message.answer(response)

    except IndexError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É: /search –ù–∞–∑–≤–∞")


# üìå –ö–æ–º–∞–Ω–¥–∞ /delete (–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É)
@dp.message(Command("delete"))
async def delete_product(message: Message):
    try:
        name = message.text.split(" ", 1)[1].strip()
        cursor.execute("SELECT * FROM products WHERE name = ?", (name,))
        product = cursor.fetchone()

        if not product:
            await message.answer(f"‚ö†Ô∏è '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        cursor.execute("DELETE FROM products WHERE name = ?", (name,))
        conn.commit()
        await message.answer(f"üóë –¢–æ–≤–∞—Ä '{hbold(name)}' –≤–∏–¥–∞–ª–µ–Ω–æ!")

    except IndexError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É: /delete –ù–∞–∑–≤–∞")


# üìå –ö–æ–º–∞–Ω–¥–∞ /edit (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É)
@dp.message(Command("edit"))
async def edit_product(message: Message):
    try:
        text = message.text.split(" ", 1)[1].strip()
        name, new_article = text.split(" - ")

        cursor.execute("SELECT * FROM products WHERE name = ?", (name.strip(),))
        product = cursor.fetchone()

        if not product:
            await message.answer(f"‚ö†Ô∏è '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        cursor.execute("UPDATE products SET article = ? WHERE name = ?", (new_article.strip(), name.strip()))
        conn.commit()

        await message.answer(f"‚úèÔ∏è –¢–æ–≤–∞—Ä '{hbold(name)}' –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
                             f"–ù–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª: üÜî {hbold(new_article.strip())}")

    except ValueError:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /edit –ù–∞–∑–≤–∞ - –ù–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª")
    except IndexError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∞ –Ω–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª: /edit –ù–∞–∑–≤–∞ - –ù–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª")


# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

