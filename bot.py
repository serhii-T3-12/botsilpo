import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = "7861897815:AAFByfkNqSIWIauet7k0lyS80SgiuqWPDhw"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect("products.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      name TEXT UNIQUE,
                      article TEXT UNIQUE)''')
    conn.commit()
    conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
def add_product(name, article):
    conn = sqlite3.connect("products.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO products (name, article) VALUES (?, ?)", (name, article))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

# –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É
def search_product(name):
    conn = sqlite3.connect("products.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, article FROM products WHERE name LIKE ?", (f"%{name}%",))
    result = cursor.fetchall()
    conn.close()
    return result

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
def get_all_products():
    conn = sqlite3.connect("products.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, article FROM products")
    result = cursor.fetchall()
    conn.close()
    return result

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /list, /search, /add.")

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message_handler(Command("list"))
async def list_command(message: Message):
    products = get_all_products()
    if products:
        response = "üìã –£—Å—ñ —Ç–æ–≤–∞—Ä–∏:\n" + "\n".join([f"‚úÖ {name} - {article}" for name, article in products])
    else:
        response = "‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É –±–∞–∑—ñ."
    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /search
@dp.message_handler(Command("search"))
async def search_command(message: Message):
    await message.answer("üîé –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É:")
    @dp.message_handler()
    async def process_search(msg: Message):
        products = search_product(msg.text.lower())
        if products:
            response = "üîç –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:\n" + "\n".join([f"‚úÖ {name} - {article}" for name, article in products])
        else:
            response = "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        await msg.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message_handler(Command("add"))
async def add_command(message: Message):
    await message.answer("‚ûï –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É —Ç–∞ –∞—Ä—Ç–∏–∫—É–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ω–∞–∑–≤–∞ - –∞—Ä—Ç–∏–∫—É–ª")
    @dp.message_handler()
    async def process_add(msg: Message):
        try:
            name, article = map(str.strip, msg.text.split("-"))
            if add_product(name.lower(), article):
                await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä {name} –¥–æ–¥–∞–Ω–æ!\nüÜî –ê—Ä—Ç–∏–∫—É–ª: {article}")
            else:
                await msg.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –¢–æ–≤–∞—Ä –∞–±–æ –∞—Ä—Ç–∏–∫—É–ª –≤–∂–µ —ñ—Å–Ω—É—î.")
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: –Ω–∞–∑–≤–∞ - –∞—Ä—Ç–∏–∫—É–ª")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    executor.start_polling(dp, skip_updates=True)

