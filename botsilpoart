import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor

# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π)
TOKEN = "7861897815:AAFByfkNqSIWIauet7k0lyS80SgiuqWPDhw"

# üîπ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ —Å–ª–æ–≤–Ω–∏–∫–∞
PRODUCTS = {
    "—Å–∞–ª–∞—Ç –∞–π–∑–±–µ—Ä–≥": "540258",
    "–∞–π–∑–±–µ—Ä–≥": "540258",
    "—Ö–ª—ñ–±": "12345",
    "–º–æ–ª–æ–∫–æ": "67890",
    "—è–±–ª—É–∫–æ": "11122",
    "–±–∞–Ω–∞–Ω": "33344",
    "–∞–ø–µ–ª—å—Å–∏–Ω": "55566",
    "–≤–∏–Ω–æ–≥—Ä–∞–¥": "77788",
}

# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, —ñ —è –∑–Ω–∞–π–¥—É –π–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª. –ê–±–æ –≤–≤–µ–¥–∏ /list, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏.")

@dp.message_handler(commands=["list"])
async def list_products(message: Message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
    product_list = "\n".join([f"üîπ {name.capitalize()} ‚Äì {article}" for name, article in PRODUCTS.items()])
    await message.reply(f"üìã **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:**\n\n{product_list}")

@dp.message_handler()
async def find_article(message: Message):
    """–®—É–∫–∞—î –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é"""
    product_name = message.text.strip().lower()
    
    if product_name in PRODUCTS:
        article = PRODUCTS[product_name]
        await message.reply(f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É '{product_name.capitalize()}': {article}")
    else:
        await message.reply("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
